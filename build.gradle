buildscript {
    ext {
        springBootVersion = '2.0.4.RELEASE'
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.19.2')
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
    }
}

// 전체 프로젝트 일괄 적용
allprojects {
    apply plugin: 'com.github.kt3k.coveralls'
    apply plugin: 'jacoco'

    repositories {
        jcenter()
        mavenCentral()
    }
}

// 서브모듈들 설정
subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
    //    mavenCentral()
    }

    dependencies {
        testCompile('org.springframework.boot:spring-boot-starter-test')
        compileOnly 'org.projectlombok:lombok:1.16.20'
    }

    jacocoTestReport {
        reports {
            html.enabled = true // 개발자 확인용
            xml.enabled = true // coveralls 전송용
        }
    }
}

// 각 서브모듈들의 JacocoReport 취합
task jacocoRootReport(type: JacocoReport) {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn = subprojects.test
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true // 개발자 확인용
        xml.enabled = true // coveralls 전송용
    }
}

// coveralls Task로 jacocoRootReport 로 취합된 결과만 전송
coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

